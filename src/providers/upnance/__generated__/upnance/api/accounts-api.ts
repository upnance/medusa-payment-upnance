/* tslint:disable */
/* eslint-disable */
/**
 * Upnance
 * Upnance API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountConfigurationType } from '../model';
// @ts-ignore
import { AccountControllerConfigurations200ResponseInner } from '../model';
// @ts-ignore
import { AccountControllerGet200Response } from '../model';
// @ts-ignore
import { AccountControllerGet200ResponseAllOfItemsInner } from '../model';
// @ts-ignore
import { AccountCreateControllerArgs } from '../model';
// @ts-ignore
import { AccountType } from '../model';
// @ts-ignore
import { AccountVerificationsModel } from '../model';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {AccountConfigurationType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerConfigurations: async (id: string, type?: AccountConfigurationType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountControllerConfigurations', 'id', id)
            const localVarPath = `/api/accounts/{id}/configurations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AccountCreateControllerArgs} accountCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerCreate: async (accountCreateControllerArgs: AccountCreateControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountCreateControllerArgs' is not null or undefined
            assertParamExists('accountControllerCreate', 'accountCreateControllerArgs', accountCreateControllerArgs)
            const localVarPath = `/api/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreateControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountControllerFind', 'id', id)
            const localVarPath = `/api/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AccountType} [type] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerGet: async (type?: AccountType, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerVerifications: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountControllerVerifications', 'id', id)
            const localVarPath = `/api/accounts/{id}/verified`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {AccountConfigurationType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerConfigurations(id: string, type?: AccountConfigurationType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountControllerConfigurations200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerConfigurations(id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AccountCreateControllerArgs} accountCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerCreate(accountCreateControllerArgs: AccountCreateControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerGet200ResponseAllOfItemsInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerCreate(accountCreateControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerGet200ResponseAllOfItemsInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AccountType} [type] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerGet(type?: AccountType, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerGet(type, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerVerifications(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountVerificationsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerVerifications(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * 
         * @param {AccountsApiAccountControllerConfigurationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerConfigurations(requestParameters: AccountsApiAccountControllerConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AccountControllerConfigurations200ResponseInner>> {
            return localVarFp.accountControllerConfigurations(requestParameters.id, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountsApiAccountControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerCreate(requestParameters: AccountsApiAccountControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<AccountControllerGet200ResponseAllOfItemsInner> {
            return localVarFp.accountControllerCreate(requestParameters.accountCreateControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountsApiAccountControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerFind(requestParameters: AccountsApiAccountControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<AccountControllerGet200ResponseAllOfItemsInner> {
            return localVarFp.accountControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountsApiAccountControllerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerGet(requestParameters: AccountsApiAccountControllerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccountControllerGet200Response> {
            return localVarFp.accountControllerGet(requestParameters.type, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccountsApiAccountControllerVerificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerVerifications(requestParameters: AccountsApiAccountControllerVerificationsRequest, options?: AxiosRequestConfig): AxiosPromise<AccountVerificationsModel> {
            return localVarFp.accountControllerVerifications(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for accountControllerConfigurations operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountControllerConfigurationsRequest
 */
export interface AccountsApiAccountControllerConfigurationsRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiAccountControllerConfigurations
     */
    readonly id: string

    /**
     * 
     * @type {AccountConfigurationType}
     * @memberof AccountsApiAccountControllerConfigurations
     */
    readonly type?: AccountConfigurationType
}

/**
 * Request parameters for accountControllerCreate operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountControllerCreateRequest
 */
export interface AccountsApiAccountControllerCreateRequest {
    /**
     * 
     * @type {AccountCreateControllerArgs}
     * @memberof AccountsApiAccountControllerCreate
     */
    readonly accountCreateControllerArgs: AccountCreateControllerArgs
}

/**
 * Request parameters for accountControllerFind operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountControllerFindRequest
 */
export interface AccountsApiAccountControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiAccountControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for accountControllerGet operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountControllerGetRequest
 */
export interface AccountsApiAccountControllerGetRequest {
    /**
     * 
     * @type {AccountType}
     * @memberof AccountsApiAccountControllerGet
     */
    readonly type?: AccountType

    /**
     * 
     * @type {number}
     * @memberof AccountsApiAccountControllerGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof AccountsApiAccountControllerGet
     */
    readonly perPage?: number
}

/**
 * Request parameters for accountControllerVerifications operation in AccountsApi.
 * @export
 * @interface AccountsApiAccountControllerVerificationsRequest
 */
export interface AccountsApiAccountControllerVerificationsRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiAccountControllerVerifications
     */
    readonly id: string
}

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * 
     * @param {AccountsApiAccountControllerConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountControllerConfigurations(requestParameters: AccountsApiAccountControllerConfigurationsRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountControllerConfigurations(requestParameters.id, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountsApiAccountControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountControllerCreate(requestParameters: AccountsApiAccountControllerCreateRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountControllerCreate(requestParameters.accountCreateControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountsApiAccountControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountControllerFind(requestParameters: AccountsApiAccountControllerFindRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountsApiAccountControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountControllerGet(requestParameters: AccountsApiAccountControllerGetRequest = {}, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountControllerGet(requestParameters.type, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccountsApiAccountControllerVerificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public accountControllerVerifications(requestParameters: AccountsApiAccountControllerVerificationsRequest, options?: AxiosRequestConfig) {
        return AccountsApiFp(this.configuration).accountControllerVerifications(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
