/* tslint:disable */
/* eslint-disable */
/**
 * Upnance
 * Upnance API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IdModel } from '../model';
// @ts-ignore
import { KYMControllerGet200Response } from '../model';
// @ts-ignore
import { KYMCreateControllerArgs } from '../model';
// @ts-ignore
import { KYMDocumentControllerGet200Response } from '../model';
// @ts-ignore
import { KYMDocumentControllerGetTypeParameter } from '../model';
// @ts-ignore
import { KYMDocumentCreateControllerArgs } from '../model';
// @ts-ignore
import { KYMEntity } from '../model';
// @ts-ignore
import { KYMFlow } from '../model';
// @ts-ignore
import { KYMProcessControllerArgs } from '../model';
// @ts-ignore
import { KYXDocumentEntity } from '../model';
// @ts-ignore
import { KYXStatus } from '../model';
// @ts-ignore
import { RequiredKYMDocument } from '../model';
/**
 * CompliancesApi - axios parameter creator
 * @export
 */
export const CompliancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {KYMCreateControllerArgs} kYMCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerCreate: async (kYMCreateControllerArgs: KYMCreateControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kYMCreateControllerArgs' is not null or undefined
            assertParamExists('kYMControllerCreate', 'kYMCreateControllerArgs', kYMCreateControllerArgs)
            const localVarPath = `/api/compliances/kyms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kYMCreateControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {KYMFlow} flow 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerDocuments: async (flow: KYMFlow, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flow' is not null or undefined
            assertParamExists('kYMControllerDocuments', 'flow', flow)
            const localVarPath = `/api/compliances/kyms/{flow}/documents`
                .replace(`{${"flow"}}`, encodeURIComponent(String(flow)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('kYMControllerFind', 'id', id)
            const localVarPath = `/api/compliances/kyms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {KYXStatus} [status] 
         * @param {string} [accountId] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerGet: async (name?: string, status?: KYXStatus, accountId?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/compliances/kyms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {KYMProcessControllerArgs} kYMProcessControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerProcess: async (id: string, kYMProcessControllerArgs: KYMProcessControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('kYMControllerProcess', 'id', id)
            // verify required parameter 'kYMProcessControllerArgs' is not null or undefined
            assertParamExists('kYMControllerProcess', 'kYMProcessControllerArgs', kYMProcessControllerArgs)
            const localVarPath = `/api/compliances/kyms/{id}/process`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kYMProcessControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {KYMDocumentCreateControllerArgs} kYMDocumentCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerCreate: async (kYMDocumentCreateControllerArgs: KYMDocumentCreateControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kYMDocumentCreateControllerArgs' is not null or undefined
            assertParamExists('kYMDocumentControllerCreate', 'kYMDocumentCreateControllerArgs', kYMDocumentCreateControllerArgs)
            const localVarPath = `/api/compliances/kym-documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kYMDocumentCreateControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('kYMDocumentControllerDelete', 'id', id)
            const localVarPath = `/api/compliances/kym-documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('kYMDocumentControllerFind', 'id', id)
            const localVarPath = `/api/compliances/kym-documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [kyxId] 
         * @param {string} [accountId] 
         * @param {KYMDocumentControllerGetTypeParameter} [type] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerGet: async (kyxId?: string, accountId?: string, type?: KYMDocumentControllerGetTypeParameter, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/compliances/kym-documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (kyxId !== undefined) {
                localVarQueryParameter['kyxId'] = kyxId;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompliancesApi - functional programming interface
 * @export
 */
export const CompliancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompliancesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {KYMCreateControllerArgs} kYMCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMControllerCreate(kYMCreateControllerArgs: KYMCreateControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYMEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMControllerCreate(kYMCreateControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {KYMFlow} flow 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMControllerDocuments(flow: KYMFlow, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RequiredKYMDocument>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMControllerDocuments(flow, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYMEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {KYXStatus} [status] 
         * @param {string} [accountId] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMControllerGet(name?: string, status?: KYXStatus, accountId?: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYMControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMControllerGet(name, status, accountId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {KYMProcessControllerArgs} kYMProcessControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMControllerProcess(id: string, kYMProcessControllerArgs: KYMProcessControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYMEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMControllerProcess(id, kYMProcessControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {KYMDocumentCreateControllerArgs} kYMDocumentCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMDocumentControllerCreate(kYMDocumentCreateControllerArgs: KYMDocumentCreateControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYXDocumentEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMDocumentControllerCreate(kYMDocumentCreateControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMDocumentControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMDocumentControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMDocumentControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYXDocumentEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMDocumentControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [kyxId] 
         * @param {string} [accountId] 
         * @param {KYMDocumentControllerGetTypeParameter} [type] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMDocumentControllerGet(kyxId?: string, accountId?: string, type?: KYMDocumentControllerGetTypeParameter, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYMDocumentControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMDocumentControllerGet(kyxId, accountId, type, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompliancesApi - factory interface
 * @export
 */
export const CompliancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompliancesApiFp(configuration)
    return {
        /**
         * 
         * @param {CompliancesApiKYMControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerCreate(requestParameters: CompliancesApiKYMControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<KYMEntity> {
            return localVarFp.kYMControllerCreate(requestParameters.kYMCreateControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompliancesApiKYMControllerDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerDocuments(requestParameters: CompliancesApiKYMControllerDocumentsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<RequiredKYMDocument>> {
            return localVarFp.kYMControllerDocuments(requestParameters.flow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompliancesApiKYMControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerFind(requestParameters: CompliancesApiKYMControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<KYMEntity> {
            return localVarFp.kYMControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompliancesApiKYMControllerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerGet(requestParameters: CompliancesApiKYMControllerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<KYMControllerGet200Response> {
            return localVarFp.kYMControllerGet(requestParameters.name, requestParameters.status, requestParameters.accountId, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompliancesApiKYMControllerProcessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerProcess(requestParameters: CompliancesApiKYMControllerProcessRequest, options?: AxiosRequestConfig): AxiosPromise<KYMEntity> {
            return localVarFp.kYMControllerProcess(requestParameters.id, requestParameters.kYMProcessControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompliancesApiKYMDocumentControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerCreate(requestParameters: CompliancesApiKYMDocumentControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<KYXDocumentEntity> {
            return localVarFp.kYMDocumentControllerCreate(requestParameters.kYMDocumentCreateControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompliancesApiKYMDocumentControllerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerDelete(requestParameters: CompliancesApiKYMDocumentControllerDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<IdModel> {
            return localVarFp.kYMDocumentControllerDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompliancesApiKYMDocumentControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerFind(requestParameters: CompliancesApiKYMDocumentControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<KYXDocumentEntity> {
            return localVarFp.kYMDocumentControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CompliancesApiKYMDocumentControllerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerGet(requestParameters: CompliancesApiKYMDocumentControllerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<KYMDocumentControllerGet200Response> {
            return localVarFp.kYMDocumentControllerGet(requestParameters.kyxId, requestParameters.accountId, requestParameters.type, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for kYMControllerCreate operation in CompliancesApi.
 * @export
 * @interface CompliancesApiKYMControllerCreateRequest
 */
export interface CompliancesApiKYMControllerCreateRequest {
    /**
     * 
     * @type {KYMCreateControllerArgs}
     * @memberof CompliancesApiKYMControllerCreate
     */
    readonly kYMCreateControllerArgs: KYMCreateControllerArgs
}

/**
 * Request parameters for kYMControllerDocuments operation in CompliancesApi.
 * @export
 * @interface CompliancesApiKYMControllerDocumentsRequest
 */
export interface CompliancesApiKYMControllerDocumentsRequest {
    /**
     * 
     * @type {KYMFlow}
     * @memberof CompliancesApiKYMControllerDocuments
     */
    readonly flow: KYMFlow
}

/**
 * Request parameters for kYMControllerFind operation in CompliancesApi.
 * @export
 * @interface CompliancesApiKYMControllerFindRequest
 */
export interface CompliancesApiKYMControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof CompliancesApiKYMControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for kYMControllerGet operation in CompliancesApi.
 * @export
 * @interface CompliancesApiKYMControllerGetRequest
 */
export interface CompliancesApiKYMControllerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CompliancesApiKYMControllerGet
     */
    readonly name?: string

    /**
     * 
     * @type {KYXStatus}
     * @memberof CompliancesApiKYMControllerGet
     */
    readonly status?: KYXStatus

    /**
     * 
     * @type {string}
     * @memberof CompliancesApiKYMControllerGet
     */
    readonly accountId?: string

    /**
     * 
     * @type {number}
     * @memberof CompliancesApiKYMControllerGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CompliancesApiKYMControllerGet
     */
    readonly perPage?: number
}

/**
 * Request parameters for kYMControllerProcess operation in CompliancesApi.
 * @export
 * @interface CompliancesApiKYMControllerProcessRequest
 */
export interface CompliancesApiKYMControllerProcessRequest {
    /**
     * 
     * @type {string}
     * @memberof CompliancesApiKYMControllerProcess
     */
    readonly id: string

    /**
     * 
     * @type {KYMProcessControllerArgs}
     * @memberof CompliancesApiKYMControllerProcess
     */
    readonly kYMProcessControllerArgs: KYMProcessControllerArgs
}

/**
 * Request parameters for kYMDocumentControllerCreate operation in CompliancesApi.
 * @export
 * @interface CompliancesApiKYMDocumentControllerCreateRequest
 */
export interface CompliancesApiKYMDocumentControllerCreateRequest {
    /**
     * 
     * @type {KYMDocumentCreateControllerArgs}
     * @memberof CompliancesApiKYMDocumentControllerCreate
     */
    readonly kYMDocumentCreateControllerArgs: KYMDocumentCreateControllerArgs
}

/**
 * Request parameters for kYMDocumentControllerDelete operation in CompliancesApi.
 * @export
 * @interface CompliancesApiKYMDocumentControllerDeleteRequest
 */
export interface CompliancesApiKYMDocumentControllerDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof CompliancesApiKYMDocumentControllerDelete
     */
    readonly id: string
}

/**
 * Request parameters for kYMDocumentControllerFind operation in CompliancesApi.
 * @export
 * @interface CompliancesApiKYMDocumentControllerFindRequest
 */
export interface CompliancesApiKYMDocumentControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof CompliancesApiKYMDocumentControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for kYMDocumentControllerGet operation in CompliancesApi.
 * @export
 * @interface CompliancesApiKYMDocumentControllerGetRequest
 */
export interface CompliancesApiKYMDocumentControllerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CompliancesApiKYMDocumentControllerGet
     */
    readonly kyxId?: string

    /**
     * 
     * @type {string}
     * @memberof CompliancesApiKYMDocumentControllerGet
     */
    readonly accountId?: string

    /**
     * 
     * @type {KYMDocumentControllerGetTypeParameter}
     * @memberof CompliancesApiKYMDocumentControllerGet
     */
    readonly type?: KYMDocumentControllerGetTypeParameter

    /**
     * 
     * @type {number}
     * @memberof CompliancesApiKYMDocumentControllerGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof CompliancesApiKYMDocumentControllerGet
     */
    readonly perPage?: number
}

/**
 * CompliancesApi - object-oriented interface
 * @export
 * @class CompliancesApi
 * @extends {BaseAPI}
 */
export class CompliancesApi extends BaseAPI {
    /**
     * 
     * @param {CompliancesApiKYMControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompliancesApi
     */
    public kYMControllerCreate(requestParameters: CompliancesApiKYMControllerCreateRequest, options?: AxiosRequestConfig) {
        return CompliancesApiFp(this.configuration).kYMControllerCreate(requestParameters.kYMCreateControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompliancesApiKYMControllerDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompliancesApi
     */
    public kYMControllerDocuments(requestParameters: CompliancesApiKYMControllerDocumentsRequest, options?: AxiosRequestConfig) {
        return CompliancesApiFp(this.configuration).kYMControllerDocuments(requestParameters.flow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompliancesApiKYMControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompliancesApi
     */
    public kYMControllerFind(requestParameters: CompliancesApiKYMControllerFindRequest, options?: AxiosRequestConfig) {
        return CompliancesApiFp(this.configuration).kYMControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompliancesApiKYMControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompliancesApi
     */
    public kYMControllerGet(requestParameters: CompliancesApiKYMControllerGetRequest = {}, options?: AxiosRequestConfig) {
        return CompliancesApiFp(this.configuration).kYMControllerGet(requestParameters.name, requestParameters.status, requestParameters.accountId, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompliancesApiKYMControllerProcessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompliancesApi
     */
    public kYMControllerProcess(requestParameters: CompliancesApiKYMControllerProcessRequest, options?: AxiosRequestConfig) {
        return CompliancesApiFp(this.configuration).kYMControllerProcess(requestParameters.id, requestParameters.kYMProcessControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompliancesApiKYMDocumentControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompliancesApi
     */
    public kYMDocumentControllerCreate(requestParameters: CompliancesApiKYMDocumentControllerCreateRequest, options?: AxiosRequestConfig) {
        return CompliancesApiFp(this.configuration).kYMDocumentControllerCreate(requestParameters.kYMDocumentCreateControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompliancesApiKYMDocumentControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompliancesApi
     */
    public kYMDocumentControllerDelete(requestParameters: CompliancesApiKYMDocumentControllerDeleteRequest, options?: AxiosRequestConfig) {
        return CompliancesApiFp(this.configuration).kYMDocumentControllerDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompliancesApiKYMDocumentControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompliancesApi
     */
    public kYMDocumentControllerFind(requestParameters: CompliancesApiKYMDocumentControllerFindRequest, options?: AxiosRequestConfig) {
        return CompliancesApiFp(this.configuration).kYMDocumentControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CompliancesApiKYMDocumentControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompliancesApi
     */
    public kYMDocumentControllerGet(requestParameters: CompliancesApiKYMDocumentControllerGetRequest = {}, options?: AxiosRequestConfig) {
        return CompliancesApiFp(this.configuration).kYMDocumentControllerGet(requestParameters.kyxId, requestParameters.accountId, requestParameters.type, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }
}
