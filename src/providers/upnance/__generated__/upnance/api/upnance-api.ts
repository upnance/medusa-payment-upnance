/* tslint:disable */
/* eslint-disable */
/**
 * Upnance
 * Upnance API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountConfigurationType } from '../model';
// @ts-ignore
import { AccountControllerConfigurations200ResponseInner } from '../model';
// @ts-ignore
import { AccountControllerGet200Response } from '../model';
// @ts-ignore
import { AccountControllerGet200ResponseAllOfItemsInner } from '../model';
// @ts-ignore
import { AccountCreateControllerArgs } from '../model';
// @ts-ignore
import { AccountType } from '../model';
// @ts-ignore
import { AccountVerificationsModel } from '../model';
// @ts-ignore
import { ApiKeyControllerGet200Response } from '../model';
// @ts-ignore
import { ApiKeyControllerGet200ResponseAllOfItemsInner } from '../model';
// @ts-ignore
import { ApiKeyCreateControllerArgs } from '../model';
// @ts-ignore
import { AuthorizationControllerGet200Response } from '../model';
// @ts-ignore
import { AuthorizationEntity } from '../model';
// @ts-ignore
import { ChargeControllerGet200Response } from '../model';
// @ts-ignore
import { ChargeEntity } from '../model';
// @ts-ignore
import { CheckoutTransactionModel } from '../model';
// @ts-ignore
import { IdModel } from '../model';
// @ts-ignore
import { KYMControllerGet200Response } from '../model';
// @ts-ignore
import { KYMCreateControllerArgs } from '../model';
// @ts-ignore
import { KYMDocumentControllerGet200Response } from '../model';
// @ts-ignore
import { KYMDocumentControllerGetTypeParameter } from '../model';
// @ts-ignore
import { KYMDocumentCreateControllerArgs } from '../model';
// @ts-ignore
import { KYMEntity } from '../model';
// @ts-ignore
import { KYMFlow } from '../model';
// @ts-ignore
import { KYMProcessControllerArgs } from '../model';
// @ts-ignore
import { KYXDocumentEntity } from '../model';
// @ts-ignore
import { KYXStatus } from '../model';
// @ts-ignore
import { OneTimeApiKeyEntity } from '../model';
// @ts-ignore
import { PayInCardChargeEntity } from '../model';
// @ts-ignore
import { PayInCardCreateControllerArgs } from '../model';
// @ts-ignore
import { PayInCardEntity } from '../model';
// @ts-ignore
import { PayInCardLinkControllerArgs } from '../model';
// @ts-ignore
import { PayInCardLinkEntity } from '../model';
// @ts-ignore
import { PayInCardRefundControllerArgs } from '../model';
// @ts-ignore
import { RequiredKYMDocument } from '../model';
// @ts-ignore
import { TransactionControllerGet200Response } from '../model';
// @ts-ignore
import { TransactionEntity } from '../model';
// @ts-ignore
import { TransactionType } from '../model';
// @ts-ignore
import { WebhookControllerGet200Response } from '../model';
// @ts-ignore
import { WebhookCreateControllerArgs } from '../model';
// @ts-ignore
import { WebhookEntity } from '../model';
/**
 * UpnanceApi - axios parameter creator
 * @export
 */
export const UpnanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {AccountConfigurationType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerConfigurations: async (id: string, type?: AccountConfigurationType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountControllerConfigurations', 'id', id)
            const localVarPath = `/api/accounts/{id}/configurations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AccountCreateControllerArgs} accountCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerCreate: async (accountCreateControllerArgs: AccountCreateControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountCreateControllerArgs' is not null or undefined
            assertParamExists('accountControllerCreate', 'accountCreateControllerArgs', accountCreateControllerArgs)
            const localVarPath = `/api/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreateControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountControllerFind', 'id', id)
            const localVarPath = `/api/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AccountType} [type] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerGet: async (type?: AccountType, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerVerifications: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountControllerVerifications', 'id', id)
            const localVarPath = `/api/accounts/{id}/verified`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ApiKeyCreateControllerArgs} apiKeyCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKeyControllerCreate: async (apiKeyCreateControllerArgs: ApiKeyCreateControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiKeyCreateControllerArgs' is not null or undefined
            assertParamExists('apiKeyControllerCreate', 'apiKeyCreateControllerArgs', apiKeyCreateControllerArgs)
            const localVarPath = `/api/api-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiKeyCreateControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKeyControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiKeyControllerDelete', 'id', id)
            const localVarPath = `/api/api-keys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKeyControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiKeyControllerFind', 'id', id)
            const localVarPath = `/api/api-keys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKeyControllerGet: async (name?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/api-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizationControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('authorizationControllerFind', 'id', id)
            const localVarPath = `/api/transactions/authorizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [transactionIds] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizationControllerGet: async (transactionIds?: Array<string>, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/transactions/authorizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (transactionIds) {
                localVarQueryParameter['transactionIds'] = transactionIds;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('chargeControllerFind', 'id', id)
            const localVarPath = `/api/transactions/charges/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<string>} [transactionIds] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeControllerGet: async (transactionIds?: Array<string>, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/transactions/charges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (transactionIds) {
                localVarQueryParameter['transactionIds'] = transactionIds;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('checkoutControllerFind', 'id', id)
            const localVarPath = `/api/checkout/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {KYMCreateControllerArgs} kYMCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerCreate: async (kYMCreateControllerArgs: KYMCreateControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kYMCreateControllerArgs' is not null or undefined
            assertParamExists('kYMControllerCreate', 'kYMCreateControllerArgs', kYMCreateControllerArgs)
            const localVarPath = `/api/compliances/kyms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kYMCreateControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {KYMFlow} flow 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerDocuments: async (flow: KYMFlow, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'flow' is not null or undefined
            assertParamExists('kYMControllerDocuments', 'flow', flow)
            const localVarPath = `/api/compliances/kyms/{flow}/documents`
                .replace(`{${"flow"}}`, encodeURIComponent(String(flow)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('kYMControllerFind', 'id', id)
            const localVarPath = `/api/compliances/kyms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {KYXStatus} [status] 
         * @param {string} [accountId] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerGet: async (name?: string, status?: KYXStatus, accountId?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/compliances/kyms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {KYMProcessControllerArgs} kYMProcessControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerProcess: async (id: string, kYMProcessControllerArgs: KYMProcessControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('kYMControllerProcess', 'id', id)
            // verify required parameter 'kYMProcessControllerArgs' is not null or undefined
            assertParamExists('kYMControllerProcess', 'kYMProcessControllerArgs', kYMProcessControllerArgs)
            const localVarPath = `/api/compliances/kyms/{id}/process`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kYMProcessControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {KYMDocumentCreateControllerArgs} kYMDocumentCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerCreate: async (kYMDocumentCreateControllerArgs: KYMDocumentCreateControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kYMDocumentCreateControllerArgs' is not null or undefined
            assertParamExists('kYMDocumentControllerCreate', 'kYMDocumentCreateControllerArgs', kYMDocumentCreateControllerArgs)
            const localVarPath = `/api/compliances/kym-documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(kYMDocumentCreateControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('kYMDocumentControllerDelete', 'id', id)
            const localVarPath = `/api/compliances/kym-documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('kYMDocumentControllerFind', 'id', id)
            const localVarPath = `/api/compliances/kym-documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [kyxId] 
         * @param {string} [accountId] 
         * @param {KYMDocumentControllerGetTypeParameter} [type] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerGet: async (kyxId?: string, accountId?: string, type?: KYMDocumentControllerGetTypeParameter, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/compliances/kym-documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (kyxId !== undefined) {
                localVarQueryParameter['kyxId'] = kyxId;
            }

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCharge: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentControllerCharge', 'id', id)
            const localVarPath = `/api/payments/{id}/charge`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PayInCardCreateControllerArgs} payInCardCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCreate: async (payInCardCreateControllerArgs: PayInCardCreateControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payInCardCreateControllerArgs' is not null or undefined
            assertParamExists('paymentControllerCreate', 'payInCardCreateControllerArgs', payInCardCreateControllerArgs)
            const localVarPath = `/api/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payInCardCreateControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {PayInCardLinkControllerArgs} payInCardLinkControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerLink: async (id: string, payInCardLinkControllerArgs: PayInCardLinkControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentControllerLink', 'id', id)
            // verify required parameter 'payInCardLinkControllerArgs' is not null or undefined
            assertParamExists('paymentControllerLink', 'payInCardLinkControllerArgs', payInCardLinkControllerArgs)
            const localVarPath = `/api/payments/{id}/link`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payInCardLinkControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id Transaction charge id
         * @param {PayInCardRefundControllerArgs} payInCardRefundControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerRefund: async (id: string, payInCardRefundControllerArgs: PayInCardRefundControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentControllerRefund', 'id', id)
            // verify required parameter 'payInCardRefundControllerArgs' is not null or undefined
            assertParamExists('paymentControllerRefund', 'payInCardRefundControllerArgs', payInCardRefundControllerArgs)
            const localVarPath = `/api/payments/{id}/refund`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payInCardRefundControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} quickpayChecksumSha256 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quickpayWebhookControllerWebhook: async (quickpayChecksumSha256: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quickpayChecksumSha256' is not null or undefined
            assertParamExists('quickpayWebhookControllerWebhook', 'quickpayChecksumSha256', quickpayChecksumSha256)
            const localVarPath = `/api/webhooks/quickpay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quickpayChecksumSha256 != null) {
                localVarHeaderParameter['quickpay-checksum-sha256'] = String(quickpayChecksumSha256);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('transactionControllerFind', 'id', id)
            const localVarPath = `/api/transactions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [accountId] 
         * @param {TransactionType} [type] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionControllerGet: async (accountId?: string, type?: TransactionType, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {WebhookCreateControllerArgs} webhookCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerCreate: async (webhookCreateControllerArgs: WebhookCreateControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookCreateControllerArgs' is not null or undefined
            assertParamExists('webhookControllerCreate', 'webhookCreateControllerArgs', webhookCreateControllerArgs)
            const localVarPath = `/api/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webhookCreateControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhookControllerDelete', 'id', id)
            const localVarPath = `/api/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhookControllerFind', 'id', id)
            const localVarPath = `/api/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [accountId] 
         * @param {string} [apiKeyId] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGet: async (accountId?: string, apiKeyId?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (apiKeyId !== undefined) {
                localVarQueryParameter['apiKeyId'] = apiKeyId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGetEvents: async (id: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhookControllerGetEvents', 'id', id)
            const localVarPath = `/api/webhooks/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpnanceApi - functional programming interface
 * @export
 */
export const UpnanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UpnanceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {AccountConfigurationType} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerConfigurations(id: string, type?: AccountConfigurationType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountControllerConfigurations200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerConfigurations(id, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AccountCreateControllerArgs} accountCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerCreate(accountCreateControllerArgs: AccountCreateControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerGet200ResponseAllOfItemsInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerCreate(accountCreateControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerGet200ResponseAllOfItemsInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AccountType} [type] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerGet(type?: AccountType, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerGet(type, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountControllerVerifications(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountVerificationsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountControllerVerifications(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ApiKeyCreateControllerArgs} apiKeyCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiKeyControllerCreate(apiKeyCreateControllerArgs: ApiKeyCreateControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OneTimeApiKeyEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiKeyControllerCreate(apiKeyCreateControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiKeyControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiKeyControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiKeyControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyControllerGet200ResponseAllOfItemsInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiKeyControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiKeyControllerGet(name?: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiKeyControllerGet(name, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizationControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizationControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<string>} [transactionIds] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizationControllerGet(transactionIds?: Array<string>, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizationControllerGet(transactionIds, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chargeControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chargeControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<string>} [transactionIds] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chargeControllerGet(transactionIds?: Array<string>, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChargeControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chargeControllerGet(transactionIds, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutTransactionModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {KYMCreateControllerArgs} kYMCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMControllerCreate(kYMCreateControllerArgs: KYMCreateControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYMEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMControllerCreate(kYMCreateControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {KYMFlow} flow 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMControllerDocuments(flow: KYMFlow, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RequiredKYMDocument>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMControllerDocuments(flow, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYMEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {KYXStatus} [status] 
         * @param {string} [accountId] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMControllerGet(name?: string, status?: KYXStatus, accountId?: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYMControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMControllerGet(name, status, accountId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {KYMProcessControllerArgs} kYMProcessControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMControllerProcess(id: string, kYMProcessControllerArgs: KYMProcessControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYMEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMControllerProcess(id, kYMProcessControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {KYMDocumentCreateControllerArgs} kYMDocumentCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMDocumentControllerCreate(kYMDocumentCreateControllerArgs: KYMDocumentCreateControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYXDocumentEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMDocumentControllerCreate(kYMDocumentCreateControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMDocumentControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMDocumentControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMDocumentControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYXDocumentEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMDocumentControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [kyxId] 
         * @param {string} [accountId] 
         * @param {KYMDocumentControllerGetTypeParameter} [type] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kYMDocumentControllerGet(kyxId?: string, accountId?: string, type?: KYMDocumentControllerGetTypeParameter, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KYMDocumentControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kYMDocumentControllerGet(kyxId, accountId, type, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerCharge(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayInCardChargeEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerCharge(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PayInCardCreateControllerArgs} payInCardCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerCreate(payInCardCreateControllerArgs: PayInCardCreateControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayInCardEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerCreate(payInCardCreateControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {PayInCardLinkControllerArgs} payInCardLinkControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerLink(id: string, payInCardLinkControllerArgs: PayInCardLinkControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayInCardLinkEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerLink(id, payInCardLinkControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id Transaction charge id
         * @param {PayInCardRefundControllerArgs} payInCardRefundControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerRefund(id: string, payInCardRefundControllerArgs: PayInCardRefundControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayInCardChargeEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerRefund(id, payInCardRefundControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} quickpayChecksumSha256 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quickpayWebhookControllerWebhook(quickpayChecksumSha256: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quickpayWebhookControllerWebhook(quickpayChecksumSha256, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [accountId] 
         * @param {TransactionType} [type] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionControllerGet(accountId?: string, type?: TransactionType, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionControllerGet(accountId, type, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {WebhookCreateControllerArgs} webhookCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerCreate(webhookCreateControllerArgs: WebhookCreateControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerCreate(webhookCreateControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [accountId] 
         * @param {string} [apiKeyId] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerGet(accountId?: string, apiKeyId?: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerGet(accountId, apiKeyId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerGetEvents(id: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerGetEvents(id, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UpnanceApi - factory interface
 * @export
 */
export const UpnanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UpnanceApiFp(configuration)
    return {
        /**
         * 
         * @param {UpnanceApiAccountControllerConfigurationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerConfigurations(requestParameters: UpnanceApiAccountControllerConfigurationsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AccountControllerConfigurations200ResponseInner>> {
            return localVarFp.accountControllerConfigurations(requestParameters.id, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiAccountControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerCreate(requestParameters: UpnanceApiAccountControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<AccountControllerGet200ResponseAllOfItemsInner> {
            return localVarFp.accountControllerCreate(requestParameters.accountCreateControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiAccountControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerFind(requestParameters: UpnanceApiAccountControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<AccountControllerGet200ResponseAllOfItemsInner> {
            return localVarFp.accountControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiAccountControllerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerGet(requestParameters: UpnanceApiAccountControllerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AccountControllerGet200Response> {
            return localVarFp.accountControllerGet(requestParameters.type, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiAccountControllerVerificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountControllerVerifications(requestParameters: UpnanceApiAccountControllerVerificationsRequest, options?: AxiosRequestConfig): AxiosPromise<AccountVerificationsModel> {
            return localVarFp.accountControllerVerifications(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiApiKeyControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKeyControllerCreate(requestParameters: UpnanceApiApiKeyControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<OneTimeApiKeyEntity> {
            return localVarFp.apiKeyControllerCreate(requestParameters.apiKeyCreateControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiApiKeyControllerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKeyControllerDelete(requestParameters: UpnanceApiApiKeyControllerDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<IdModel> {
            return localVarFp.apiKeyControllerDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiApiKeyControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKeyControllerFind(requestParameters: UpnanceApiApiKeyControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<ApiKeyControllerGet200ResponseAllOfItemsInner> {
            return localVarFp.apiKeyControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiApiKeyControllerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiKeyControllerGet(requestParameters: UpnanceApiApiKeyControllerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ApiKeyControllerGet200Response> {
            return localVarFp.apiKeyControllerGet(requestParameters.name, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiAuthorizationControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizationControllerFind(requestParameters: UpnanceApiAuthorizationControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<AuthorizationEntity> {
            return localVarFp.authorizationControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiAuthorizationControllerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizationControllerGet(requestParameters: UpnanceApiAuthorizationControllerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AuthorizationControllerGet200Response> {
            return localVarFp.authorizationControllerGet(requestParameters.transactionIds, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiChargeControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeControllerFind(requestParameters: UpnanceApiChargeControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<ChargeEntity> {
            return localVarFp.chargeControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiChargeControllerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargeControllerGet(requestParameters: UpnanceApiChargeControllerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ChargeControllerGet200Response> {
            return localVarFp.chargeControllerGet(requestParameters.transactionIds, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiCheckoutControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutControllerFind(requestParameters: UpnanceApiCheckoutControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<CheckoutTransactionModel> {
            return localVarFp.checkoutControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiKYMControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerCreate(requestParameters: UpnanceApiKYMControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<KYMEntity> {
            return localVarFp.kYMControllerCreate(requestParameters.kYMCreateControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiKYMControllerDocumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerDocuments(requestParameters: UpnanceApiKYMControllerDocumentsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<RequiredKYMDocument>> {
            return localVarFp.kYMControllerDocuments(requestParameters.flow, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiKYMControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerFind(requestParameters: UpnanceApiKYMControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<KYMEntity> {
            return localVarFp.kYMControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiKYMControllerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerGet(requestParameters: UpnanceApiKYMControllerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<KYMControllerGet200Response> {
            return localVarFp.kYMControllerGet(requestParameters.name, requestParameters.status, requestParameters.accountId, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiKYMControllerProcessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMControllerProcess(requestParameters: UpnanceApiKYMControllerProcessRequest, options?: AxiosRequestConfig): AxiosPromise<KYMEntity> {
            return localVarFp.kYMControllerProcess(requestParameters.id, requestParameters.kYMProcessControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiKYMDocumentControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerCreate(requestParameters: UpnanceApiKYMDocumentControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<KYXDocumentEntity> {
            return localVarFp.kYMDocumentControllerCreate(requestParameters.kYMDocumentCreateControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiKYMDocumentControllerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerDelete(requestParameters: UpnanceApiKYMDocumentControllerDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<IdModel> {
            return localVarFp.kYMDocumentControllerDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiKYMDocumentControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerFind(requestParameters: UpnanceApiKYMDocumentControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<KYXDocumentEntity> {
            return localVarFp.kYMDocumentControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiKYMDocumentControllerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kYMDocumentControllerGet(requestParameters: UpnanceApiKYMDocumentControllerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<KYMDocumentControllerGet200Response> {
            return localVarFp.kYMDocumentControllerGet(requestParameters.kyxId, requestParameters.accountId, requestParameters.type, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiPaymentControllerChargeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCharge(requestParameters: UpnanceApiPaymentControllerChargeRequest, options?: AxiosRequestConfig): AxiosPromise<PayInCardChargeEntity> {
            return localVarFp.paymentControllerCharge(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiPaymentControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCreate(requestParameters: UpnanceApiPaymentControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<PayInCardEntity> {
            return localVarFp.paymentControllerCreate(requestParameters.payInCardCreateControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiPaymentControllerLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerLink(requestParameters: UpnanceApiPaymentControllerLinkRequest, options?: AxiosRequestConfig): AxiosPromise<PayInCardLinkEntity> {
            return localVarFp.paymentControllerLink(requestParameters.id, requestParameters.payInCardLinkControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiPaymentControllerRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerRefund(requestParameters: UpnanceApiPaymentControllerRefundRequest, options?: AxiosRequestConfig): AxiosPromise<PayInCardChargeEntity> {
            return localVarFp.paymentControllerRefund(requestParameters.id, requestParameters.payInCardRefundControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiQuickpayWebhookControllerWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quickpayWebhookControllerWebhook(requestParameters: UpnanceApiQuickpayWebhookControllerWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<IdModel> {
            return localVarFp.quickpayWebhookControllerWebhook(requestParameters.quickpayChecksumSha256, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiTransactionControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionControllerFind(requestParameters: UpnanceApiTransactionControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<TransactionEntity> {
            return localVarFp.transactionControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiTransactionControllerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionControllerGet(requestParameters: UpnanceApiTransactionControllerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TransactionControllerGet200Response> {
            return localVarFp.transactionControllerGet(requestParameters.accountId, requestParameters.type, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiWebhookControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerCreate(requestParameters: UpnanceApiWebhookControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookEntity> {
            return localVarFp.webhookControllerCreate(requestParameters.webhookCreateControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiWebhookControllerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerDelete(requestParameters: UpnanceApiWebhookControllerDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<IdModel> {
            return localVarFp.webhookControllerDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiWebhookControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerFind(requestParameters: UpnanceApiWebhookControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookEntity> {
            return localVarFp.webhookControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiWebhookControllerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGet(requestParameters: UpnanceApiWebhookControllerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WebhookControllerGet200Response> {
            return localVarFp.webhookControllerGet(requestParameters.accountId, requestParameters.apiKeyId, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UpnanceApiWebhookControllerGetEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGetEvents(requestParameters: UpnanceApiWebhookControllerGetEventsRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookControllerGet200Response> {
            return localVarFp.webhookControllerGetEvents(requestParameters.id, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for accountControllerConfigurations operation in UpnanceApi.
 * @export
 * @interface UpnanceApiAccountControllerConfigurationsRequest
 */
export interface UpnanceApiAccountControllerConfigurationsRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiAccountControllerConfigurations
     */
    readonly id: string

    /**
     * 
     * @type {AccountConfigurationType}
     * @memberof UpnanceApiAccountControllerConfigurations
     */
    readonly type?: AccountConfigurationType
}

/**
 * Request parameters for accountControllerCreate operation in UpnanceApi.
 * @export
 * @interface UpnanceApiAccountControllerCreateRequest
 */
export interface UpnanceApiAccountControllerCreateRequest {
    /**
     * 
     * @type {AccountCreateControllerArgs}
     * @memberof UpnanceApiAccountControllerCreate
     */
    readonly accountCreateControllerArgs: AccountCreateControllerArgs
}

/**
 * Request parameters for accountControllerFind operation in UpnanceApi.
 * @export
 * @interface UpnanceApiAccountControllerFindRequest
 */
export interface UpnanceApiAccountControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiAccountControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for accountControllerGet operation in UpnanceApi.
 * @export
 * @interface UpnanceApiAccountControllerGetRequest
 */
export interface UpnanceApiAccountControllerGetRequest {
    /**
     * 
     * @type {AccountType}
     * @memberof UpnanceApiAccountControllerGet
     */
    readonly type?: AccountType

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiAccountControllerGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiAccountControllerGet
     */
    readonly perPage?: number
}

/**
 * Request parameters for accountControllerVerifications operation in UpnanceApi.
 * @export
 * @interface UpnanceApiAccountControllerVerificationsRequest
 */
export interface UpnanceApiAccountControllerVerificationsRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiAccountControllerVerifications
     */
    readonly id: string
}

/**
 * Request parameters for apiKeyControllerCreate operation in UpnanceApi.
 * @export
 * @interface UpnanceApiApiKeyControllerCreateRequest
 */
export interface UpnanceApiApiKeyControllerCreateRequest {
    /**
     * 
     * @type {ApiKeyCreateControllerArgs}
     * @memberof UpnanceApiApiKeyControllerCreate
     */
    readonly apiKeyCreateControllerArgs: ApiKeyCreateControllerArgs
}

/**
 * Request parameters for apiKeyControllerDelete operation in UpnanceApi.
 * @export
 * @interface UpnanceApiApiKeyControllerDeleteRequest
 */
export interface UpnanceApiApiKeyControllerDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiApiKeyControllerDelete
     */
    readonly id: string
}

/**
 * Request parameters for apiKeyControllerFind operation in UpnanceApi.
 * @export
 * @interface UpnanceApiApiKeyControllerFindRequest
 */
export interface UpnanceApiApiKeyControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiApiKeyControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for apiKeyControllerGet operation in UpnanceApi.
 * @export
 * @interface UpnanceApiApiKeyControllerGetRequest
 */
export interface UpnanceApiApiKeyControllerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiApiKeyControllerGet
     */
    readonly name?: string

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiApiKeyControllerGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiApiKeyControllerGet
     */
    readonly perPage?: number
}

/**
 * Request parameters for authorizationControllerFind operation in UpnanceApi.
 * @export
 * @interface UpnanceApiAuthorizationControllerFindRequest
 */
export interface UpnanceApiAuthorizationControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiAuthorizationControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for authorizationControllerGet operation in UpnanceApi.
 * @export
 * @interface UpnanceApiAuthorizationControllerGetRequest
 */
export interface UpnanceApiAuthorizationControllerGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof UpnanceApiAuthorizationControllerGet
     */
    readonly transactionIds?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiAuthorizationControllerGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiAuthorizationControllerGet
     */
    readonly perPage?: number
}

/**
 * Request parameters for chargeControllerFind operation in UpnanceApi.
 * @export
 * @interface UpnanceApiChargeControllerFindRequest
 */
export interface UpnanceApiChargeControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiChargeControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for chargeControllerGet operation in UpnanceApi.
 * @export
 * @interface UpnanceApiChargeControllerGetRequest
 */
export interface UpnanceApiChargeControllerGetRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof UpnanceApiChargeControllerGet
     */
    readonly transactionIds?: Array<string>

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiChargeControllerGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiChargeControllerGet
     */
    readonly perPage?: number
}

/**
 * Request parameters for checkoutControllerFind operation in UpnanceApi.
 * @export
 * @interface UpnanceApiCheckoutControllerFindRequest
 */
export interface UpnanceApiCheckoutControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiCheckoutControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for kYMControllerCreate operation in UpnanceApi.
 * @export
 * @interface UpnanceApiKYMControllerCreateRequest
 */
export interface UpnanceApiKYMControllerCreateRequest {
    /**
     * 
     * @type {KYMCreateControllerArgs}
     * @memberof UpnanceApiKYMControllerCreate
     */
    readonly kYMCreateControllerArgs: KYMCreateControllerArgs
}

/**
 * Request parameters for kYMControllerDocuments operation in UpnanceApi.
 * @export
 * @interface UpnanceApiKYMControllerDocumentsRequest
 */
export interface UpnanceApiKYMControllerDocumentsRequest {
    /**
     * 
     * @type {KYMFlow}
     * @memberof UpnanceApiKYMControllerDocuments
     */
    readonly flow: KYMFlow
}

/**
 * Request parameters for kYMControllerFind operation in UpnanceApi.
 * @export
 * @interface UpnanceApiKYMControllerFindRequest
 */
export interface UpnanceApiKYMControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiKYMControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for kYMControllerGet operation in UpnanceApi.
 * @export
 * @interface UpnanceApiKYMControllerGetRequest
 */
export interface UpnanceApiKYMControllerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiKYMControllerGet
     */
    readonly name?: string

    /**
     * 
     * @type {KYXStatus}
     * @memberof UpnanceApiKYMControllerGet
     */
    readonly status?: KYXStatus

    /**
     * 
     * @type {string}
     * @memberof UpnanceApiKYMControllerGet
     */
    readonly accountId?: string

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiKYMControllerGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiKYMControllerGet
     */
    readonly perPage?: number
}

/**
 * Request parameters for kYMControllerProcess operation in UpnanceApi.
 * @export
 * @interface UpnanceApiKYMControllerProcessRequest
 */
export interface UpnanceApiKYMControllerProcessRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiKYMControllerProcess
     */
    readonly id: string

    /**
     * 
     * @type {KYMProcessControllerArgs}
     * @memberof UpnanceApiKYMControllerProcess
     */
    readonly kYMProcessControllerArgs: KYMProcessControllerArgs
}

/**
 * Request parameters for kYMDocumentControllerCreate operation in UpnanceApi.
 * @export
 * @interface UpnanceApiKYMDocumentControllerCreateRequest
 */
export interface UpnanceApiKYMDocumentControllerCreateRequest {
    /**
     * 
     * @type {KYMDocumentCreateControllerArgs}
     * @memberof UpnanceApiKYMDocumentControllerCreate
     */
    readonly kYMDocumentCreateControllerArgs: KYMDocumentCreateControllerArgs
}

/**
 * Request parameters for kYMDocumentControllerDelete operation in UpnanceApi.
 * @export
 * @interface UpnanceApiKYMDocumentControllerDeleteRequest
 */
export interface UpnanceApiKYMDocumentControllerDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiKYMDocumentControllerDelete
     */
    readonly id: string
}

/**
 * Request parameters for kYMDocumentControllerFind operation in UpnanceApi.
 * @export
 * @interface UpnanceApiKYMDocumentControllerFindRequest
 */
export interface UpnanceApiKYMDocumentControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiKYMDocumentControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for kYMDocumentControllerGet operation in UpnanceApi.
 * @export
 * @interface UpnanceApiKYMDocumentControllerGetRequest
 */
export interface UpnanceApiKYMDocumentControllerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiKYMDocumentControllerGet
     */
    readonly kyxId?: string

    /**
     * 
     * @type {string}
     * @memberof UpnanceApiKYMDocumentControllerGet
     */
    readonly accountId?: string

    /**
     * 
     * @type {KYMDocumentControllerGetTypeParameter}
     * @memberof UpnanceApiKYMDocumentControllerGet
     */
    readonly type?: KYMDocumentControllerGetTypeParameter

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiKYMDocumentControllerGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiKYMDocumentControllerGet
     */
    readonly perPage?: number
}

/**
 * Request parameters for paymentControllerCharge operation in UpnanceApi.
 * @export
 * @interface UpnanceApiPaymentControllerChargeRequest
 */
export interface UpnanceApiPaymentControllerChargeRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiPaymentControllerCharge
     */
    readonly id: string
}

/**
 * Request parameters for paymentControllerCreate operation in UpnanceApi.
 * @export
 * @interface UpnanceApiPaymentControllerCreateRequest
 */
export interface UpnanceApiPaymentControllerCreateRequest {
    /**
     * 
     * @type {PayInCardCreateControllerArgs}
     * @memberof UpnanceApiPaymentControllerCreate
     */
    readonly payInCardCreateControllerArgs: PayInCardCreateControllerArgs
}

/**
 * Request parameters for paymentControllerLink operation in UpnanceApi.
 * @export
 * @interface UpnanceApiPaymentControllerLinkRequest
 */
export interface UpnanceApiPaymentControllerLinkRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiPaymentControllerLink
     */
    readonly id: string

    /**
     * 
     * @type {PayInCardLinkControllerArgs}
     * @memberof UpnanceApiPaymentControllerLink
     */
    readonly payInCardLinkControllerArgs: PayInCardLinkControllerArgs
}

/**
 * Request parameters for paymentControllerRefund operation in UpnanceApi.
 * @export
 * @interface UpnanceApiPaymentControllerRefundRequest
 */
export interface UpnanceApiPaymentControllerRefundRequest {
    /**
     * Transaction charge id
     * @type {string}
     * @memberof UpnanceApiPaymentControllerRefund
     */
    readonly id: string

    /**
     * 
     * @type {PayInCardRefundControllerArgs}
     * @memberof UpnanceApiPaymentControllerRefund
     */
    readonly payInCardRefundControllerArgs: PayInCardRefundControllerArgs
}

/**
 * Request parameters for quickpayWebhookControllerWebhook operation in UpnanceApi.
 * @export
 * @interface UpnanceApiQuickpayWebhookControllerWebhookRequest
 */
export interface UpnanceApiQuickpayWebhookControllerWebhookRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiQuickpayWebhookControllerWebhook
     */
    readonly quickpayChecksumSha256: string
}

/**
 * Request parameters for transactionControllerFind operation in UpnanceApi.
 * @export
 * @interface UpnanceApiTransactionControllerFindRequest
 */
export interface UpnanceApiTransactionControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiTransactionControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for transactionControllerGet operation in UpnanceApi.
 * @export
 * @interface UpnanceApiTransactionControllerGetRequest
 */
export interface UpnanceApiTransactionControllerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiTransactionControllerGet
     */
    readonly accountId?: string

    /**
     * 
     * @type {TransactionType}
     * @memberof UpnanceApiTransactionControllerGet
     */
    readonly type?: TransactionType

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiTransactionControllerGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiTransactionControllerGet
     */
    readonly perPage?: number
}

/**
 * Request parameters for webhookControllerCreate operation in UpnanceApi.
 * @export
 * @interface UpnanceApiWebhookControllerCreateRequest
 */
export interface UpnanceApiWebhookControllerCreateRequest {
    /**
     * 
     * @type {WebhookCreateControllerArgs}
     * @memberof UpnanceApiWebhookControllerCreate
     */
    readonly webhookCreateControllerArgs: WebhookCreateControllerArgs
}

/**
 * Request parameters for webhookControllerDelete operation in UpnanceApi.
 * @export
 * @interface UpnanceApiWebhookControllerDeleteRequest
 */
export interface UpnanceApiWebhookControllerDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiWebhookControllerDelete
     */
    readonly id: string
}

/**
 * Request parameters for webhookControllerFind operation in UpnanceApi.
 * @export
 * @interface UpnanceApiWebhookControllerFindRequest
 */
export interface UpnanceApiWebhookControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiWebhookControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for webhookControllerGet operation in UpnanceApi.
 * @export
 * @interface UpnanceApiWebhookControllerGetRequest
 */
export interface UpnanceApiWebhookControllerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiWebhookControllerGet
     */
    readonly accountId?: string

    /**
     * 
     * @type {string}
     * @memberof UpnanceApiWebhookControllerGet
     */
    readonly apiKeyId?: string

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiWebhookControllerGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiWebhookControllerGet
     */
    readonly perPage?: number
}

/**
 * Request parameters for webhookControllerGetEvents operation in UpnanceApi.
 * @export
 * @interface UpnanceApiWebhookControllerGetEventsRequest
 */
export interface UpnanceApiWebhookControllerGetEventsRequest {
    /**
     * 
     * @type {string}
     * @memberof UpnanceApiWebhookControllerGetEvents
     */
    readonly id: string

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiWebhookControllerGetEvents
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof UpnanceApiWebhookControllerGetEvents
     */
    readonly perPage?: number
}

/**
 * UpnanceApi - object-oriented interface
 * @export
 * @class UpnanceApi
 * @extends {BaseAPI}
 */
export class UpnanceApi extends BaseAPI {
    /**
     * 
     * @param {UpnanceApiAccountControllerConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public accountControllerConfigurations(requestParameters: UpnanceApiAccountControllerConfigurationsRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).accountControllerConfigurations(requestParameters.id, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiAccountControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public accountControllerCreate(requestParameters: UpnanceApiAccountControllerCreateRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).accountControllerCreate(requestParameters.accountCreateControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiAccountControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public accountControllerFind(requestParameters: UpnanceApiAccountControllerFindRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).accountControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiAccountControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public accountControllerGet(requestParameters: UpnanceApiAccountControllerGetRequest = {}, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).accountControllerGet(requestParameters.type, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiAccountControllerVerificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public accountControllerVerifications(requestParameters: UpnanceApiAccountControllerVerificationsRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).accountControllerVerifications(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiApiKeyControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public apiKeyControllerCreate(requestParameters: UpnanceApiApiKeyControllerCreateRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).apiKeyControllerCreate(requestParameters.apiKeyCreateControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiApiKeyControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public apiKeyControllerDelete(requestParameters: UpnanceApiApiKeyControllerDeleteRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).apiKeyControllerDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiApiKeyControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public apiKeyControllerFind(requestParameters: UpnanceApiApiKeyControllerFindRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).apiKeyControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiApiKeyControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public apiKeyControllerGet(requestParameters: UpnanceApiApiKeyControllerGetRequest = {}, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).apiKeyControllerGet(requestParameters.name, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiAuthorizationControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public authorizationControllerFind(requestParameters: UpnanceApiAuthorizationControllerFindRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).authorizationControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiAuthorizationControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public authorizationControllerGet(requestParameters: UpnanceApiAuthorizationControllerGetRequest = {}, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).authorizationControllerGet(requestParameters.transactionIds, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiChargeControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public chargeControllerFind(requestParameters: UpnanceApiChargeControllerFindRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).chargeControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiChargeControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public chargeControllerGet(requestParameters: UpnanceApiChargeControllerGetRequest = {}, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).chargeControllerGet(requestParameters.transactionIds, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiCheckoutControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public checkoutControllerFind(requestParameters: UpnanceApiCheckoutControllerFindRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).checkoutControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiKYMControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public kYMControllerCreate(requestParameters: UpnanceApiKYMControllerCreateRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).kYMControllerCreate(requestParameters.kYMCreateControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiKYMControllerDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public kYMControllerDocuments(requestParameters: UpnanceApiKYMControllerDocumentsRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).kYMControllerDocuments(requestParameters.flow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiKYMControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public kYMControllerFind(requestParameters: UpnanceApiKYMControllerFindRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).kYMControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiKYMControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public kYMControllerGet(requestParameters: UpnanceApiKYMControllerGetRequest = {}, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).kYMControllerGet(requestParameters.name, requestParameters.status, requestParameters.accountId, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiKYMControllerProcessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public kYMControllerProcess(requestParameters: UpnanceApiKYMControllerProcessRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).kYMControllerProcess(requestParameters.id, requestParameters.kYMProcessControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiKYMDocumentControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public kYMDocumentControllerCreate(requestParameters: UpnanceApiKYMDocumentControllerCreateRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).kYMDocumentControllerCreate(requestParameters.kYMDocumentCreateControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiKYMDocumentControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public kYMDocumentControllerDelete(requestParameters: UpnanceApiKYMDocumentControllerDeleteRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).kYMDocumentControllerDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiKYMDocumentControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public kYMDocumentControllerFind(requestParameters: UpnanceApiKYMDocumentControllerFindRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).kYMDocumentControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiKYMDocumentControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public kYMDocumentControllerGet(requestParameters: UpnanceApiKYMDocumentControllerGetRequest = {}, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).kYMDocumentControllerGet(requestParameters.kyxId, requestParameters.accountId, requestParameters.type, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiPaymentControllerChargeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public paymentControllerCharge(requestParameters: UpnanceApiPaymentControllerChargeRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).paymentControllerCharge(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiPaymentControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public paymentControllerCreate(requestParameters: UpnanceApiPaymentControllerCreateRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).paymentControllerCreate(requestParameters.payInCardCreateControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiPaymentControllerLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public paymentControllerLink(requestParameters: UpnanceApiPaymentControllerLinkRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).paymentControllerLink(requestParameters.id, requestParameters.payInCardLinkControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiPaymentControllerRefundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public paymentControllerRefund(requestParameters: UpnanceApiPaymentControllerRefundRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).paymentControllerRefund(requestParameters.id, requestParameters.payInCardRefundControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiQuickpayWebhookControllerWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public quickpayWebhookControllerWebhook(requestParameters: UpnanceApiQuickpayWebhookControllerWebhookRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).quickpayWebhookControllerWebhook(requestParameters.quickpayChecksumSha256, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiTransactionControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public transactionControllerFind(requestParameters: UpnanceApiTransactionControllerFindRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).transactionControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiTransactionControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public transactionControllerGet(requestParameters: UpnanceApiTransactionControllerGetRequest = {}, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).transactionControllerGet(requestParameters.accountId, requestParameters.type, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiWebhookControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public webhookControllerCreate(requestParameters: UpnanceApiWebhookControllerCreateRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).webhookControllerCreate(requestParameters.webhookCreateControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiWebhookControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public webhookControllerDelete(requestParameters: UpnanceApiWebhookControllerDeleteRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).webhookControllerDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiWebhookControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public webhookControllerFind(requestParameters: UpnanceApiWebhookControllerFindRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).webhookControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiWebhookControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public webhookControllerGet(requestParameters: UpnanceApiWebhookControllerGetRequest = {}, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).webhookControllerGet(requestParameters.accountId, requestParameters.apiKeyId, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UpnanceApiWebhookControllerGetEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpnanceApi
     */
    public webhookControllerGetEvents(requestParameters: UpnanceApiWebhookControllerGetEventsRequest, options?: AxiosRequestConfig) {
        return UpnanceApiFp(this.configuration).webhookControllerGetEvents(requestParameters.id, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }
}
