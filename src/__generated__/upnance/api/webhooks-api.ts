/* tslint:disable */
/* eslint-disable */
/**
 * Upnance
 * Upnance API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { IdModel } from '../model';
// @ts-ignore
import { WebhookControllerGet200Response } from '../model';
// @ts-ignore
import { WebhookCreateControllerArgs } from '../model';
// @ts-ignore
import { WebhookEntity } from '../model';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {WebhookCreateControllerArgs} webhookCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerCreate: async (webhookCreateControllerArgs: WebhookCreateControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webhookCreateControllerArgs' is not null or undefined
            assertParamExists('webhookControllerCreate', 'webhookCreateControllerArgs', webhookCreateControllerArgs)
            const localVarPath = `/api/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(webhookCreateControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhookControllerDelete', 'id', id)
            const localVarPath = `/api/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhookControllerFind', 'id', id)
            const localVarPath = `/api/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [accountId] 
         * @param {string} [apiKeyId] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGet: async (accountId?: string, apiKeyId?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (apiKeyId !== undefined) {
                localVarQueryParameter['apiKeyId'] = apiKeyId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGetEvents: async (id: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('webhookControllerGetEvents', 'id', id)
            const localVarPath = `/api/webhooks/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {WebhookCreateControllerArgs} webhookCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerCreate(webhookCreateControllerArgs: WebhookCreateControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerCreate(webhookCreateControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [accountId] 
         * @param {string} [apiKeyId] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerGet(accountId?: string, apiKeyId?: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerGet(accountId, apiKeyId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerGetEvents(id: string, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerGetEvents(id, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * 
         * @param {WebhooksApiWebhookControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerCreate(requestParameters: WebhooksApiWebhookControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookEntity> {
            return localVarFp.webhookControllerCreate(requestParameters.webhookCreateControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WebhooksApiWebhookControllerDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerDelete(requestParameters: WebhooksApiWebhookControllerDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<IdModel> {
            return localVarFp.webhookControllerDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WebhooksApiWebhookControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerFind(requestParameters: WebhooksApiWebhookControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookEntity> {
            return localVarFp.webhookControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WebhooksApiWebhookControllerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGet(requestParameters: WebhooksApiWebhookControllerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<WebhookControllerGet200Response> {
            return localVarFp.webhookControllerGet(requestParameters.accountId, requestParameters.apiKeyId, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {WebhooksApiWebhookControllerGetEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGetEvents(requestParameters: WebhooksApiWebhookControllerGetEventsRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookControllerGet200Response> {
            return localVarFp.webhookControllerGetEvents(requestParameters.id, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for webhookControllerCreate operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhookControllerCreateRequest
 */
export interface WebhooksApiWebhookControllerCreateRequest {
    /**
     * 
     * @type {WebhookCreateControllerArgs}
     * @memberof WebhooksApiWebhookControllerCreate
     */
    readonly webhookCreateControllerArgs: WebhookCreateControllerArgs
}

/**
 * Request parameters for webhookControllerDelete operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhookControllerDeleteRequest
 */
export interface WebhooksApiWebhookControllerDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof WebhooksApiWebhookControllerDelete
     */
    readonly id: string
}

/**
 * Request parameters for webhookControllerFind operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhookControllerFindRequest
 */
export interface WebhooksApiWebhookControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof WebhooksApiWebhookControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for webhookControllerGet operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhookControllerGetRequest
 */
export interface WebhooksApiWebhookControllerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof WebhooksApiWebhookControllerGet
     */
    readonly accountId?: string

    /**
     * 
     * @type {string}
     * @memberof WebhooksApiWebhookControllerGet
     */
    readonly apiKeyId?: string

    /**
     * 
     * @type {number}
     * @memberof WebhooksApiWebhookControllerGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof WebhooksApiWebhookControllerGet
     */
    readonly perPage?: number
}

/**
 * Request parameters for webhookControllerGetEvents operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhookControllerGetEventsRequest
 */
export interface WebhooksApiWebhookControllerGetEventsRequest {
    /**
     * 
     * @type {string}
     * @memberof WebhooksApiWebhookControllerGetEvents
     */
    readonly id: string

    /**
     * 
     * @type {number}
     * @memberof WebhooksApiWebhookControllerGetEvents
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof WebhooksApiWebhookControllerGetEvents
     */
    readonly perPage?: number
}

/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI {
    /**
     * 
     * @param {WebhooksApiWebhookControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhookControllerCreate(requestParameters: WebhooksApiWebhookControllerCreateRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhookControllerCreate(requestParameters.webhookCreateControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WebhooksApiWebhookControllerDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhookControllerDelete(requestParameters: WebhooksApiWebhookControllerDeleteRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhookControllerDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WebhooksApiWebhookControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhookControllerFind(requestParameters: WebhooksApiWebhookControllerFindRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhookControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WebhooksApiWebhookControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhookControllerGet(requestParameters: WebhooksApiWebhookControllerGetRequest = {}, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhookControllerGet(requestParameters.accountId, requestParameters.apiKeyId, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {WebhooksApiWebhookControllerGetEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhookControllerGetEvents(requestParameters: WebhooksApiWebhookControllerGetEventsRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhookControllerGetEvents(requestParameters.id, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }
}
