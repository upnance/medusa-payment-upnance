/* tslint:disable */
/* eslint-disable */
/**
 * Upnance
 * Upnance API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayInCardChargeEntity } from '../model';
// @ts-ignore
import { PayInCardCreateControllerArgs } from '../model';
// @ts-ignore
import { PayInCardEntity } from '../model';
// @ts-ignore
import { PayInCardLinkControllerArgs } from '../model';
// @ts-ignore
import { PayInCardLinkEntity } from '../model';
// @ts-ignore
import { PayInCardRefundControllerArgs } from '../model';
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
export const PaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCharge: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentControllerCharge', 'id', id)
            const localVarPath = `/api/payments/{id}/charge`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PayInCardCreateControllerArgs} payInCardCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCreate: async (payInCardCreateControllerArgs: PayInCardCreateControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payInCardCreateControllerArgs' is not null or undefined
            assertParamExists('paymentControllerCreate', 'payInCardCreateControllerArgs', payInCardCreateControllerArgs)
            const localVarPath = `/api/payments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payInCardCreateControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {PayInCardLinkControllerArgs} payInCardLinkControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerLink: async (id: string, payInCardLinkControllerArgs: PayInCardLinkControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentControllerLink', 'id', id)
            // verify required parameter 'payInCardLinkControllerArgs' is not null or undefined
            assertParamExists('paymentControllerLink', 'payInCardLinkControllerArgs', payInCardLinkControllerArgs)
            const localVarPath = `/api/payments/{id}/link`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payInCardLinkControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id Transaction charge id
         * @param {PayInCardRefundControllerArgs} payInCardRefundControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerRefund: async (id: string, payInCardRefundControllerArgs: PayInCardRefundControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('paymentControllerRefund', 'id', id)
            // verify required parameter 'payInCardRefundControllerArgs' is not null or undefined
            assertParamExists('paymentControllerRefund', 'payInCardRefundControllerArgs', payInCardRefundControllerArgs)
            const localVarPath = `/api/payments/{id}/refund`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payInCardRefundControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsApi - functional programming interface
 * @export
 */
export const PaymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerCharge(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayInCardChargeEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerCharge(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PayInCardCreateControllerArgs} payInCardCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerCreate(payInCardCreateControllerArgs: PayInCardCreateControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayInCardEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerCreate(payInCardCreateControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {PayInCardLinkControllerArgs} payInCardLinkControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerLink(id: string, payInCardLinkControllerArgs: PayInCardLinkControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayInCardLinkEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerLink(id, payInCardLinkControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id Transaction charge id
         * @param {PayInCardRefundControllerArgs} payInCardRefundControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async paymentControllerRefund(id: string, payInCardRefundControllerArgs: PayInCardRefundControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayInCardChargeEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.paymentControllerRefund(id, payInCardRefundControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentsApi - factory interface
 * @export
 */
export const PaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentsApiFp(configuration)
    return {
        /**
         * 
         * @param {PaymentsApiPaymentControllerChargeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCharge(requestParameters: PaymentsApiPaymentControllerChargeRequest, options?: AxiosRequestConfig): AxiosPromise<PayInCardChargeEntity> {
            return localVarFp.paymentControllerCharge(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PaymentsApiPaymentControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerCreate(requestParameters: PaymentsApiPaymentControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<PayInCardEntity> {
            return localVarFp.paymentControllerCreate(requestParameters.payInCardCreateControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PaymentsApiPaymentControllerLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerLink(requestParameters: PaymentsApiPaymentControllerLinkRequest, options?: AxiosRequestConfig): AxiosPromise<PayInCardLinkEntity> {
            return localVarFp.paymentControllerLink(requestParameters.id, requestParameters.payInCardLinkControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PaymentsApiPaymentControllerRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        paymentControllerRefund(requestParameters: PaymentsApiPaymentControllerRefundRequest, options?: AxiosRequestConfig): AxiosPromise<PayInCardChargeEntity> {
            return localVarFp.paymentControllerRefund(requestParameters.id, requestParameters.payInCardRefundControllerArgs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for paymentControllerCharge operation in PaymentsApi.
 * @export
 * @interface PaymentsApiPaymentControllerChargeRequest
 */
export interface PaymentsApiPaymentControllerChargeRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentsApiPaymentControllerCharge
     */
    readonly id: string
}

/**
 * Request parameters for paymentControllerCreate operation in PaymentsApi.
 * @export
 * @interface PaymentsApiPaymentControllerCreateRequest
 */
export interface PaymentsApiPaymentControllerCreateRequest {
    /**
     * 
     * @type {PayInCardCreateControllerArgs}
     * @memberof PaymentsApiPaymentControllerCreate
     */
    readonly payInCardCreateControllerArgs: PayInCardCreateControllerArgs
}

/**
 * Request parameters for paymentControllerLink operation in PaymentsApi.
 * @export
 * @interface PaymentsApiPaymentControllerLinkRequest
 */
export interface PaymentsApiPaymentControllerLinkRequest {
    /**
     * 
     * @type {string}
     * @memberof PaymentsApiPaymentControllerLink
     */
    readonly id: string

    /**
     * 
     * @type {PayInCardLinkControllerArgs}
     * @memberof PaymentsApiPaymentControllerLink
     */
    readonly payInCardLinkControllerArgs: PayInCardLinkControllerArgs
}

/**
 * Request parameters for paymentControllerRefund operation in PaymentsApi.
 * @export
 * @interface PaymentsApiPaymentControllerRefundRequest
 */
export interface PaymentsApiPaymentControllerRefundRequest {
    /**
     * Transaction charge id
     * @type {string}
     * @memberof PaymentsApiPaymentControllerRefund
     */
    readonly id: string

    /**
     * 
     * @type {PayInCardRefundControllerArgs}
     * @memberof PaymentsApiPaymentControllerRefund
     */
    readonly payInCardRefundControllerArgs: PayInCardRefundControllerArgs
}

/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
export class PaymentsApi extends BaseAPI {
    /**
     * 
     * @param {PaymentsApiPaymentControllerChargeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentControllerCharge(requestParameters: PaymentsApiPaymentControllerChargeRequest, options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentControllerCharge(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PaymentsApiPaymentControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentControllerCreate(requestParameters: PaymentsApiPaymentControllerCreateRequest, options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentControllerCreate(requestParameters.payInCardCreateControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PaymentsApiPaymentControllerLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentControllerLink(requestParameters: PaymentsApiPaymentControllerLinkRequest, options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentControllerLink(requestParameters.id, requestParameters.payInCardLinkControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PaymentsApiPaymentControllerRefundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    public paymentControllerRefund(requestParameters: PaymentsApiPaymentControllerRefundRequest, options?: AxiosRequestConfig) {
        return PaymentsApiFp(this.configuration).paymentControllerRefund(requestParameters.id, requestParameters.payInCardRefundControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }
}
