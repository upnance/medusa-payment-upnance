/* tslint:disable */
/* eslint-disable */
/**
 * Upnance
 * Upnance API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SubscriptionControllerGet200Response } from '../model';
// @ts-ignore
import { SubscriptionCreateControllerArgs } from '../model';
// @ts-ignore
import { SubscriptionEntity } from '../model';
// @ts-ignore
import { SubscriptionLinkControllerArgs } from '../model';
// @ts-ignore
import { SubscriptionLinkEntity } from '../model';
// @ts-ignore
import { SubscriptionPayInCardEntity } from '../model';
// @ts-ignore
import { SubscriptionRecurControllerArgs } from '../model';
// @ts-ignore
import { TransactionType } from '../model';
/**
 * SubscriptionsApi - axios parameter creator
 * @export
 */
export const SubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id Subscription id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionControllerCancel: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionControllerCancel', 'id', id)
            const localVarPath = `/api/subscriptions/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubscriptionCreateControllerArgs} subscriptionCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionControllerCreate: async (subscriptionCreateControllerArgs: SubscriptionCreateControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionCreateControllerArgs' is not null or undefined
            assertParamExists('subscriptionControllerCreate', 'subscriptionCreateControllerArgs', subscriptionCreateControllerArgs)
            const localVarPath = `/api/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreateControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionControllerFind: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionControllerFind', 'id', id)
            const localVarPath = `/api/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [accountId] 
         * @param {TransactionType} [type] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionControllerGet: async (accountId?: string, type?: TransactionType, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)

            if (accountId !== undefined) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {SubscriptionLinkControllerArgs} subscriptionLinkControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionControllerLink: async (id: string, subscriptionLinkControllerArgs: SubscriptionLinkControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionControllerLink', 'id', id)
            // verify required parameter 'subscriptionLinkControllerArgs' is not null or undefined
            assertParamExists('subscriptionControllerLink', 'subscriptionLinkControllerArgs', subscriptionLinkControllerArgs)
            const localVarPath = `/api/subscriptions/{id}/link`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionLinkControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id Subscription id
         * @param {SubscriptionRecurControllerArgs} subscriptionRecurControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionControllerRecur: async (id: string, subscriptionRecurControllerArgs: SubscriptionRecurControllerArgs, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('subscriptionControllerRecur', 'id', id)
            // verify required parameter 'subscriptionRecurControllerArgs' is not null or undefined
            assertParamExists('subscriptionControllerRecur', 'subscriptionRecurControllerArgs', subscriptionRecurControllerArgs)
            const localVarPath = `/api/subscriptions/{id}/recur`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication API-Key required
            await setApiKeyToObject(localVarHeaderParameter, "API-Key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionRecurControllerArgs, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionsApi - functional programming interface
 * @export
 */
export const SubscriptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id Subscription id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionControllerCancel(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionControllerCancel(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SubscriptionCreateControllerArgs} subscriptionCreateControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionControllerCreate(subscriptionCreateControllerArgs: SubscriptionCreateControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionControllerCreate(subscriptionCreateControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionControllerFind(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionControllerFind(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [accountId] 
         * @param {TransactionType} [type] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionControllerGet(accountId?: string, type?: TransactionType, page?: number, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionControllerGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionControllerGet(accountId, type, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {SubscriptionLinkControllerArgs} subscriptionLinkControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionControllerLink(id: string, subscriptionLinkControllerArgs: SubscriptionLinkControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionLinkEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionControllerLink(id, subscriptionLinkControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id Subscription id
         * @param {SubscriptionRecurControllerArgs} subscriptionRecurControllerArgs 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async subscriptionControllerRecur(id: string, subscriptionRecurControllerArgs: SubscriptionRecurControllerArgs, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionPayInCardEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.subscriptionControllerRecur(id, subscriptionRecurControllerArgs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriptionsApi - factory interface
 * @export
 */
export const SubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionsApiFp(configuration)
    return {
        /**
         * 
         * @param {SubscriptionsApiSubscriptionControllerCancelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionControllerCancel(requestParameters: SubscriptionsApiSubscriptionControllerCancelRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionEntity> {
            return localVarFp.subscriptionControllerCancel(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionsApiSubscriptionControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionControllerCreate(requestParameters: SubscriptionsApiSubscriptionControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionEntity> {
            return localVarFp.subscriptionControllerCreate(requestParameters.subscriptionCreateControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionsApiSubscriptionControllerFindRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionControllerFind(requestParameters: SubscriptionsApiSubscriptionControllerFindRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionEntity> {
            return localVarFp.subscriptionControllerFind(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionsApiSubscriptionControllerGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionControllerGet(requestParameters: SubscriptionsApiSubscriptionControllerGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<SubscriptionControllerGet200Response> {
            return localVarFp.subscriptionControllerGet(requestParameters.accountId, requestParameters.type, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionsApiSubscriptionControllerLinkRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionControllerLink(requestParameters: SubscriptionsApiSubscriptionControllerLinkRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionLinkEntity> {
            return localVarFp.subscriptionControllerLink(requestParameters.id, requestParameters.subscriptionLinkControllerArgs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionsApiSubscriptionControllerRecurRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subscriptionControllerRecur(requestParameters: SubscriptionsApiSubscriptionControllerRecurRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionPayInCardEntity> {
            return localVarFp.subscriptionControllerRecur(requestParameters.id, requestParameters.subscriptionRecurControllerArgs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for subscriptionControllerCancel operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiSubscriptionControllerCancelRequest
 */
export interface SubscriptionsApiSubscriptionControllerCancelRequest {
    /**
     * Subscription id
     * @type {string}
     * @memberof SubscriptionsApiSubscriptionControllerCancel
     */
    readonly id: string
}

/**
 * Request parameters for subscriptionControllerCreate operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiSubscriptionControllerCreateRequest
 */
export interface SubscriptionsApiSubscriptionControllerCreateRequest {
    /**
     * 
     * @type {SubscriptionCreateControllerArgs}
     * @memberof SubscriptionsApiSubscriptionControllerCreate
     */
    readonly subscriptionCreateControllerArgs: SubscriptionCreateControllerArgs
}

/**
 * Request parameters for subscriptionControllerFind operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiSubscriptionControllerFindRequest
 */
export interface SubscriptionsApiSubscriptionControllerFindRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiSubscriptionControllerFind
     */
    readonly id: string
}

/**
 * Request parameters for subscriptionControllerGet operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiSubscriptionControllerGetRequest
 */
export interface SubscriptionsApiSubscriptionControllerGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiSubscriptionControllerGet
     */
    readonly accountId?: string

    /**
     * 
     * @type {TransactionType}
     * @memberof SubscriptionsApiSubscriptionControllerGet
     */
    readonly type?: TransactionType

    /**
     * 
     * @type {number}
     * @memberof SubscriptionsApiSubscriptionControllerGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SubscriptionsApiSubscriptionControllerGet
     */
    readonly perPage?: number
}

/**
 * Request parameters for subscriptionControllerLink operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiSubscriptionControllerLinkRequest
 */
export interface SubscriptionsApiSubscriptionControllerLinkRequest {
    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiSubscriptionControllerLink
     */
    readonly id: string

    /**
     * 
     * @type {SubscriptionLinkControllerArgs}
     * @memberof SubscriptionsApiSubscriptionControllerLink
     */
    readonly subscriptionLinkControllerArgs: SubscriptionLinkControllerArgs
}

/**
 * Request parameters for subscriptionControllerRecur operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiSubscriptionControllerRecurRequest
 */
export interface SubscriptionsApiSubscriptionControllerRecurRequest {
    /**
     * Subscription id
     * @type {string}
     * @memberof SubscriptionsApiSubscriptionControllerRecur
     */
    readonly id: string

    /**
     * 
     * @type {SubscriptionRecurControllerArgs}
     * @memberof SubscriptionsApiSubscriptionControllerRecur
     */
    readonly subscriptionRecurControllerArgs: SubscriptionRecurControllerArgs
}

/**
 * SubscriptionsApi - object-oriented interface
 * @export
 * @class SubscriptionsApi
 * @extends {BaseAPI}
 */
export class SubscriptionsApi extends BaseAPI {
    /**
     * 
     * @param {SubscriptionsApiSubscriptionControllerCancelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public subscriptionControllerCancel(requestParameters: SubscriptionsApiSubscriptionControllerCancelRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).subscriptionControllerCancel(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionsApiSubscriptionControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public subscriptionControllerCreate(requestParameters: SubscriptionsApiSubscriptionControllerCreateRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).subscriptionControllerCreate(requestParameters.subscriptionCreateControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionsApiSubscriptionControllerFindRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public subscriptionControllerFind(requestParameters: SubscriptionsApiSubscriptionControllerFindRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).subscriptionControllerFind(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionsApiSubscriptionControllerGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public subscriptionControllerGet(requestParameters: SubscriptionsApiSubscriptionControllerGetRequest = {}, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).subscriptionControllerGet(requestParameters.accountId, requestParameters.type, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionsApiSubscriptionControllerLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public subscriptionControllerLink(requestParameters: SubscriptionsApiSubscriptionControllerLinkRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).subscriptionControllerLink(requestParameters.id, requestParameters.subscriptionLinkControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SubscriptionsApiSubscriptionControllerRecurRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public subscriptionControllerRecur(requestParameters: SubscriptionsApiSubscriptionControllerRecurRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).subscriptionControllerRecur(requestParameters.id, requestParameters.subscriptionRecurControllerArgs, options).then((request) => request(this.axios, this.basePath));
    }
}
